---
import { type CollectionEntry } from "astro:content";
import { Image } from 'astro:assets';
import ButtonAura from './atoms/ButtonAura.astro';

interface Props {
  portfolioItems: CollectionEntry<"portfolio">[];
  transitionType?: string;
}

const { portfolioItems, transitionType } = Astro.props;
// Transform portfolio items into image-like structure for the lightbox
const images = portfolioItems.map(item => ({
  src: item.data.image,
  alt: item.data.title,
  title: item.data.title,
  description: item.data.description,
  slug: item.id, // For linking to standalone page
  tags: item.data.tags,
  links: item.data.links || [] // Featured links (Behance, Dribbble, etc.)
}));
---

<!-- Lightbox Dialog Only (thumbnails are in main grid) -->
<dialog class="p-0 bg-transparent border-none lightbox-dialog overflow-clip" data-option={transitionType || "slide-in"}>
    <div class="grid w-screen h-screen grid-cols-1 grid-rows-1 lightbox-content">
      {
        images.map((image, index) => (
          <figure class="grid grid-cols-1 transition-all opacity-0 pointer-events-none lightbox-image-container place-content-center" id={`image-${index}`}>
            {/* For performance, only the first few images are eager loaded */}
            <div class="flex items-center justify-center lightbox-image-wrapper">
              <Image
                src={image.src}
                alt={image.alt}
                loading={index < 4 ? "eager" : "lazy"}
                class="block w-auto h-auto max-w-full mx-auto lightbox-image"
                data-index={index}
                widths={[800, 1200, 1600]}
                sizes="100vw"
              />
            </div>
            <figcaption class="px-4 py-4 transition-opacity opacity-100 lightbox-caption">
              <div class="max-w-4xl mx-auto">
                {image.title ? (
                  <p class="pt-4 pb-2 text-lg font-extrabold text-center text-gray-50 text-balance">
                    {image.title}
                  </p>
                ) : null}
                {image.description ? (
                  <p class="pb-3 text-sm font-light text-center text-gray-300 text-balance">
                    {image.description}
                  </p>
                ) : null}

                <!-- Action buttons: View Project | Social Share | Featured Links -->
                <div class="flex items-center justify-center gap-4 mt-3 flex-wrap">
                  <!-- View Project Button (ButtonAura) -->
                  <ButtonAura label="View Project" link={`/portfolio/${image.slug}`} />

                  <!-- Vertical Divider -->
                  <div class="h-8 w-px bg-gray-600"></div>

                  <!-- Social Share Buttons -->
                  <div class="flex gap-2">
                    <!-- Bluesky Share -->
                    <a
                      href={`https://bsky.app/intent/compose?text=${encodeURIComponent(image.title + ' - https://astro-marcus.netlify.app/portfolio/' + image.slug)}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="inline-flex items-center justify-center text-gray-400 transition-colors bg-gray-800 rounded-lg w-9 h-9 hover:bg-gray-700 hover:text-blue-400"
                      aria-label="Share on Bluesky"
                      data-social-share="bluesky"
                    >
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12 10.8c-1.087-2.114-4.046-6.053-6.798-7.995C2.566.944 1.561 1.266.902 1.565.139 1.908 0 3.08 0 3.768c0 .69.378 5.65.624 6.479.815 2.736 3.713 3.66 6.383 3.364.136-.02.275-.039.415-.056-.138.022-.276.04-.415.056-3.912.58-7.387 2.005-2.83 7.078 5.013 5.19 6.87-1.113 7.823-4.308.953 3.195 2.05 9.271 7.733 4.308 4.267-4.308 1.172-6.498-2.74-7.078a8.741 8.741 0 0 1-.415-.056c.14.017.279.036.415.056 2.67.297 5.568-.628 6.383-3.364.246-.828.624-5.79.624-6.478 0-.69-.139-1.861-.902-2.206-.659-.298-1.664-.62-4.3 1.24C16.046 4.748 13.087 8.687 12 10.8Z"/>
                      </svg>
                    </a>

                    <!-- LinkedIn Share -->
                    <a
                      href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(`https://astro-marcus.netlify.app/portfolio/${image.slug}`)}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="inline-flex items-center justify-center text-gray-400 transition-colors bg-gray-800 rounded-lg w-9 h-9 hover:bg-gray-700 hover:text-blue-500"
                      aria-label="Share on LinkedIn"
                      data-social-share="linkedin"
                    >
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                      </svg>
                    </a>

                    <!-- Copy Link Button -->
                    <button
                      type="button"
                      class="inline-flex items-center justify-center text-gray-400 transition-colors bg-gray-800 rounded-lg w-9 h-9 hover:bg-gray-700 hover:text-green-400 copy-link-button"
                      aria-label="Copy link"
                      data-url={`https://astro-marcus.netlify.app/portfolio/${image.slug}`}
                      data-social-share="copy"
                    >
                      <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                    </button>
                  </div>

                  <!-- Vertical Divider & Featured Links (only show if links exist) -->
                  {image.links && image.links.length > 0 && (
                    <>
                      <div class="h-8 w-px bg-gray-600"></div>
                      <div class="flex gap-2">
                        {image.links.map((link: any) => (
                          <a
                            href={link.url}
                            target="_blank"
                            rel="noopener noreferrer"
                            class="inline-flex items-center gap-1.5 px-3 py-1.5 text-xs font-medium text-gray-300 transition-colors bg-gray-800 rounded-lg hover:bg-gray-700 hover:text-white"
                          >
                            {link.label}
                            <svg class="w-3 h-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                            </svg>
                          </a>
                        ))}
                      </div>
                    </>
                  )}
                </div>
              </div>
            </figcaption>
          </figure>
        ))
      }
    </div>
    <!-- Navigation buttons -->
    <button class="prev-button fixed left-8 top-1/2 -translate-y-1/2 block bg-transparent border-none outline-none cursor-pointer z-[999] opacity-100 transition-opacity" aria-label="previous slide">
      <svg
        class="h-full p-0 transition-all duration-200 text-pink-50/75 w-9 aspect-square hover:text-white/100"
        xmlns="http://www.w3.org/2000/svg"
        width="32"
        height="32"
        viewBox="0 0 32 32"
      >
        <path
          fill="currentColor"
          d="M16 2a14 14 0 1 0 14 14A14 14 0 0 0 16 2m8 15H11.85l5.58 5.573L16 24l-8-8l8-8l1.43 1.393L11.85 15H24Z"
        >
        </path>
        <path
          fill="none"
          d="m16 8l1.43 1.393L11.85 15H24v2H11.85l5.58 5.573L16 24l-8-8z"
        ></path>
      </svg>
    </button>
    <button class="next-button fixed right-8 top-1/2 -translate-y-1/2 block bg-transparent border-none outline-none cursor-pointer z-[999] opacity-100 transition-opacity" aria-label="next slide">
      <svg
        class="h-full p-0 transition-all duration-200 text-pink-50/75 w-9 aspect-square hover:text-white/100"
        xmlns="http://www.w3.org/2000/svg"
        width="32"
        height="32"
        viewBox="0 0 32 32"
      >
        <path
          fill="currentColor"
          d="M2 16A14 14 0 1 0 16 2A14 14 0 0 0 2 16m6-1h12.15l-5.58-5.607L16 8l8 8l-8 8l-1.43-1.427L20.15 17H8Z"
        >
        </path>
        <path
          fill="none"
          d="m16 8l-1.43 1.393L20.15 15H8v2h12.15l-5.58 5.573L16 24l8-8z"
        ></path>
      </svg>
    </button>
    <button class="close-button fixed top-8 right-8 block bg-transparent border-none outline-none cursor-zoom-out z-[999] opacity-100 transition-opacity" aria-label="close button">
      <svg
        class="h-full p-0 transition-all duration-200 text-pink-50/75 w-9 aspect-square hover:text-white/100"
        xmlns="http://www.w3.org/2000/svg"
        width="32"
        height="32"
        viewBox="0 0 32 32"
      >
        <path
          fill="currentColor"
          d="M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m5.4 21L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z"
        >
        </path>
      </svg>
    </button>
  </dialog>

<style>
  /* Lightbox CSS Custom Properties & Critical Animations */
  .lightbox-dialog {
    /* Animation durations - customizable */
    --duration-zoom-in: 0.75s;
    --duration-background-transition: 0.3s;
    --duration-slide-transition: 0.3s;
    --duration-close-transition: 0.5s;
    --caption-height: 5lh;
    --ease-zoom: cubic-bezier(0.5, -0.5, 0.1, 1.5);
    --ease-slide-transition: cubic-bezier(0.9, 0, 0.1, 1);
  }

  @media (prefers-reduced-motion) {
    .lightbox-dialog {
      --duration-zoom-in: 0s;
      --duration-slide-transition: 0s;
      --duration-background-transition: 0s;
      --duration-close-transition: 0s;
    }
  }

  /* Prevent page scroll when lightbox is open */
  html:has(dialog[open]) {
    overflow: hidden;
  }

  /* Dialog Exit State (before opening) */
  .lightbox-dialog {
    opacity: 0;
    display: none;
    transform: translateX(100%);
    transition:
      overlay 1s ease-in allow-discrete,
      display 1s ease-in allow-discrete;
  }

  @media (width <= 640px) {
    .lightbox-dialog {
      transition:
        overlay 0s ease-in allow-discrete,
        display 0s ease-in allow-discrete;
    }
  }

  /* Dialog Open State - Simple flex layout */
  .lightbox-dialog[open] {
    opacity: 1;
    max-width: 100%;
    max-height: 100%;
    height: 100dvh;
    width: 100vw;
    display: flex;
    align-items: center;
    justify-content: center;
    transform: translateX(0);
  }

  /* Starting style (entry animation) */
  @starting-style {
    .lightbox-dialog[open] {
      translate: 0 100vh;
    }
    .lightbox-dialog[open]::backdrop {
      opacity: 0;
    }
    .lightbox-dialog[open] .lightbox-content .lightbox-image-container .lightbox-caption {
      opacity: 0;
    }
    .lightbox-dialog[open] button {
      opacity: 0;
    }
  }

  /* Backdrop styling */
  .lightbox-dialog::backdrop {
    opacity: 0;
    backdrop-filter: blur(8px);
    /* background: oklch(40% 0 0 / 5%); */
    background: oklch(0.2101 0.0318 264.66 / 69%)
  }

  .lightbox-dialog[open]::backdrop {
    opacity: 1;
  }

  /* Closing state */
  .lightbox-dialog.closing,
  .lightbox-dialog.closing::backdrop {
    opacity: 0;
    transition: opacity var(--duration-close-transition) ease;
  }

  /* Lightbox Content - Full viewport */
  .lightbox-content {
    position: relative;
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Image Container - Absolute positioned, stacked */
  .lightbox-image-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    pointer-events: none;
    transition:
      opacity var(--duration-slide-transition) var(--ease-slide-transition),
      transform var(--duration-slide-transition) var(--ease-slide-transition);
  }

  .lightbox-image-container.active {
    opacity: 1;
    pointer-events: auto;
  }

  .lightbox-image-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }

  /* Floating caption panel at bottom */
  .lightbox-caption {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    max-height: 40vh;
    overflow-y: auto;
    transition: opacity var(--duration-background-transition) ease-in;
    background: linear-gradient(to top, rgba(0,0,0,0.9) 0%, rgba(0,0,0,0.7) 80%, transparent 100%);
    backdrop-filter: blur(8px);
  }

  /* Image animation properties (set by JS) */
  .lightbox-image {
    --initial-scale: 1;
    --initial-x: 0px;
    --initial-y: 0px;
    --final-scale: 1;
    max-height: 100vh;
    max-width: 100vw;
    object-fit: contain;
    transform-origin: center center;
    animation: zoom-in-animation var(--duration-zoom-in) var(--ease-zoom) forwards;
  }

  @keyframes zoom-in-animation {
    from {
      transform: translate(var(--initial-x), var(--initial-y)) scale(var(--initial-scale));
    }
    to {
      transform: scale(var(--final-scale));
    }
  }

  /* Transition type: fade */
  .lightbox-dialog[data-option="fade"] .lightbox-image-container {
    transform: none;
  }

  /* Transition type: slide */
  .lightbox-dialog[data-option="slide"] .lightbox-image-container {
    transform: translateX(100%);
  }

  .lightbox-dialog[data-option="slide"] .lightbox-image-container.previous {
    transform: translateX(-100%);
  }

  .lightbox-dialog[data-option="slide"] .lightbox-image-container.next {
    transform: translateX(100%);
  }

  .lightbox-dialog[data-option="slide"] .lightbox-image-container.active {
    transform: translateX(0%);
  }

  /* Navigation buttons now styled with Tailwind classes */
</style>

<script>
  // Types for better type
  // This can me moved to an external .ts file.
  interface LightboxElements {
    thumbnailButtons: NodeListOf<HTMLButtonElement>;
    lightboxDialog: HTMLDialogElement | null;
    prevButton: HTMLButtonElement | null;
    nextButton: HTMLButtonElement | null;
    closeButton: HTMLButtonElement | null;
  }

  interface LightboxState {
    currentIndex: number;
    resizeTimeout?: number;
    closeDuration: number;
    debug: boolean;
  }

  document.addEventListener("astro:page-load", () => {
    // Select grid items instead of thumbnail buttons
    const portfolioItems = document.querySelectorAll<HTMLElement>(
      "[data-portfolio-item]",
    );
    const lightboxDialog =
      document.querySelector<HTMLDialogElement>(".lightbox-dialog");
    const prevButton =
      document.querySelector<HTMLButtonElement>(".prev-button");
    const nextButton =
      document.querySelector<HTMLButtonElement>(".next-button");
    const closeButton =
      document.querySelector<HTMLButtonElement>(".close-button");

    const debug = false; // Enable debug logging

    // Early exit if lightbox dialog doesn't exist on this page
    if (!lightboxDialog) {
      return;
    }

    // Create an AbortController to clean up event listeners when navigating away
    const abortController = new AbortController();
    const signal = abortController.signal;

    // Set closeDuration from CSS custom property
    const closeDuration =
      parseFloat(
        getComputedStyle(lightboxDialog).getPropertyValue(
          "--duration-close-transition",
        ),
      ) * 1000; // Convert seconds to milliseconds

    let currentIndex = 0;
    let resizeTimeout: number | undefined;

    function logDebugInfo(
      action: string,
      rect?: DOMRect,
      image?: HTMLImageElement,
    ): void {
      if (!debug) return;

      console.log(`Transition: ${lightboxDialog?.getAttribute("data-option")}`);
      console.log(`Debug Info (${action}):`);
      if (rect) {
        console.log(
          `Thumbnail Position: X=${rect.left}, Y=${rect.top}, Width=${rect.width}, Height=${rect.height}`,
        );
      }
      if (image) {
        const imgRect = image.getBoundingClientRect();
        console.log(
          `Target Image Position: X=${imgRect.left}, Y=${imgRect.top}, Width=${imgRect.width}, Height=${imgRect.height}`,
        );
      }
    }

    function calculateCentering(element: HTMLElement): void {
      const wrapper = element.closest(".lightbox-image-wrapper") as HTMLElement;

      if (!wrapper) {
        console.error("Image wrapper not found.");
        return;
      }

      const wrapperRect = wrapper.getBoundingClientRect();
      const wrapperWidth = wrapperRect.width;
      const wrapperHeight = wrapperRect.height;

      if (!wrapperWidth || !wrapperHeight) return;

      // Find the actual <img> element (Astro Image component uses <picture><img></picture>)
      const img = element.tagName === 'IMG' ? element as HTMLImageElement : element.querySelector('img');

      if (!img) {
        console.error("Image element not found.");
        return;
      }

      // Use naturalWidth/naturalHeight for actual image dimensions
      // or getBoundingClientRect if image hasn't loaded yet
      const imageWidth = img.naturalWidth || img.getBoundingClientRect().width;
      const imageHeight = img.naturalHeight || img.getBoundingClientRect().height;

      console.log('=== calculateCentering DEBUG ===');
      console.log('Element:', element);
      console.log('Img element:', img);
      console.log('Wrapper size:', wrapperWidth, 'x', wrapperHeight);
      console.log('Image natural size:', img.naturalWidth, 'x', img.naturalHeight);
      console.log('Image computed size:', imageWidth, 'x', imageHeight);

      if (!imageWidth || !imageHeight) {
        console.error("Image dimensions are invalid.");
        return;
      }

      const imageAspectRatio = imageWidth / imageHeight;
      const wrapperAspectRatio = wrapperWidth / wrapperHeight;

      let finalX = 0;
      let finalY = 0;

      if (wrapperAspectRatio > imageAspectRatio) {
        const targetHeight = wrapperHeight;
        const targetWidth = targetHeight * imageAspectRatio;
        finalX = (wrapperWidth - targetWidth) / 2; // Center horizontally
      } else {
        const targetWidth = wrapperWidth;
        const targetHeight = targetWidth / imageAspectRatio;
        finalY = (wrapperHeight - targetHeight) / 2; // Center vertically
      }

      finalX = Math.max(0, finalX);
      finalY = Math.max(0, finalY);

      console.log('Final transform:', `X=${finalX}px, Y=${finalY}px`);
      console.log('================================');

      element.style.setProperty("--final-x", `${finalX}px`);
      element.style.setProperty("--final-y", `${finalY}px`);
      element.style.setProperty("--final-scale", `1`);
    }

    function showImageAtIndex(index: number): void {
      const lightboxImageContainers = document.querySelectorAll<HTMLElement>(
        ".lightbox-image-container",
      );

      if (index < 0 || index >= lightboxImageContainers.length) return;

      for (const container of lightboxImageContainers) {
        container.classList.remove("active", "previous", "next");
      }

      const newActiveImage = document.getElementById(`image-${index}`);
      if (newActiveImage) {
        newActiveImage.classList.add("active");
        currentIndex = index;

        const imageElement =
          newActiveImage.querySelector<HTMLElement>(".lightbox-image");
        if (imageElement) {
          // Find the actual img element for logging
          const img = imageElement.tagName === 'IMG' ? imageElement as HTMLImageElement : imageElement.querySelector('img');
          logDebugInfo("Image Loaded", undefined, img || undefined);
          // Centering is now handled by flexbox
        }

        const prevIndex =
          (currentIndex - 1 + lightboxImageContainers.length) %
          lightboxImageContainers.length;
        const nextIndex = (currentIndex + 1) % lightboxImageContainers.length;

        const prevImage = document.getElementById(`image-${prevIndex}`);
        const nextImage = document.getElementById(`image-${nextIndex}`);

        prevImage?.classList.add("previous");
        nextImage?.classList.add("next");
      } else {
        console.error(`Image container with id image-${index} not found.`);
      }
    }

    function openLightbox(item: HTMLElement): void {
      if (!lightboxDialog) return;

      const rect = item.getBoundingClientRect();
      const index = Number.parseInt(item.dataset.index || "0", 10);

      const activeImage = document.getElementById(`image-${index}`);
      if (activeImage) {
        activeImage.classList.add("active");
        lightboxDialog.showModal();
        currentIndex = index;

        requestAnimationFrame(() => {
          const lightboxWrapper = activeImage.querySelector<HTMLDivElement>(
            ".lightbox-image-wrapper",
          );

          if (!lightboxWrapper) {
            console.error("Lightbox wrapper not found.");
            return;
          }

          const wrapperRect = lightboxWrapper.getBoundingClientRect();
          if (wrapperRect.width === 0 || wrapperRect.height === 0) {
            console.error("Lightbox image wrapper has zero dimensions.");
            return;
          }

          const lightboxImageElement =
            activeImage.querySelector<HTMLElement>(".lightbox-image");
          if (lightboxImageElement) {
            const buttonAspectRatio = rect.width / rect.height;
            const wrapperAspectRatio = wrapperRect.width / wrapperRect.height;

            const initialScale =
              buttonAspectRatio > wrapperAspectRatio
                ? rect.width / wrapperRect.width
                : rect.height / wrapperRect.height;

            lightboxImageElement.style.setProperty("--initial-x", `${rect.left}px`);
            lightboxImageElement.style.setProperty("--initial-y", `${rect.top}px`);
            lightboxImageElement.style.setProperty(
              "--initial-scale",
              `${initialScale}`,
            );

            logDebugInfo("Thumbnail Clicked", rect);

            // Centering is now handled by flexbox, no manual calculation needed

            showImageAtIndex(currentIndex);
          }
        });
      }
    }

    function showPreviousImage(): void {
      const prevIndex =
        (currentIndex - 1 + portfolioItems.length) % portfolioItems.length;
      showImageAtIndex(prevIndex);
    }

    function showNextImage(): void {
      const nextIndex = (currentIndex + 1) % portfolioItems.length;
      showImageAtIndex(nextIndex);
    }

    function handleKeydown(event: KeyboardEvent): void {
      if (!lightboxDialog || !lightboxDialog.open) return;

      if (event.key === "ArrowLeft") {
        showPreviousImage();
      } else if (event.key === "ArrowRight") {
        showNextImage();
      } else if (event.key === "Escape") {
        event.preventDefault(); // Prevent the default action (closing the dialog)
        closeDialog(); // Call custom close function
      }
    }

    // Centering is now handled by CSS flexbox, no manual calculation needed

    function handleSwipe(event: TouchEvent): void {
      const touchStartX = event.touches[0].clientX;

      function handleTouchEnd(touchEndEvent: TouchEvent): void {
        const touchEndX = touchEndEvent.changedTouches[0].clientX;
        const deltaX = touchEndX - touchStartX;

        if (deltaX > 50) {
          showPreviousImage();
        } else if (deltaX < -50) {
          showNextImage();
        }
        document.removeEventListener("touchend", handleTouchEnd);
      }
      document.addEventListener("touchend", handleTouchEnd);
    }
    // Function to close the dialog
    // Do not execute .close() until after transitions have completed
    function closeDialog() {
      if (lightboxDialog) {
        lightboxDialog.classList.add("closing"); // Add class for transition
        // Get the current timestamp when closing starts
        const startTime = Date.now();

        // Delay the actual closing of the dialog
        setTimeout(() => {
          lightboxDialog.close(); // Close the dialog after transition
          lightboxDialog.classList.remove("closing"); // Clean up class

          // Calculate and log the duration
          const endTime = Date.now();
          const duration = endTime - startTime;
          console.log(`Dialog closing transition duration: ${duration} ms`);
        }, closeDuration);
      }
    }

    // Attach event listeners with abort signal for cleanup
    // Listen to clicks on portfolio grid items
    for (const item of portfolioItems) {
      item.addEventListener("click", () => openLightbox(item), { signal });
      // Add cursor pointer style
      item.style.cursor = "pointer";
    }
    prevButton?.addEventListener("click", showPreviousImage, { signal });
    nextButton?.addEventListener("click", showNextImage, { signal });
    closeButton?.addEventListener("click", closeDialog, { signal });
    document.addEventListener("keydown", handleKeydown, { signal });
    document.addEventListener("touchstart", handleSwipe, { signal });

    // Resize handling no longer needed - flexbox handles centering automatically

    // Copy link functionality
    const copyLinkButtons = document.querySelectorAll<HTMLButtonElement>(".copy-link-button");
    copyLinkButtons.forEach(button => {
      button.addEventListener("click", async () => {
        const url = button.dataset.url;
        if (!url) return;

        try {
          await navigator.clipboard.writeText(url);

          // Show visual feedback
          const originalHTML = button.innerHTML;
          button.innerHTML = `
            <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
          `;
          button.classList.remove("text-gray-400");
          button.classList.add("text-green-400");

          // Reset after 2 seconds
          setTimeout(() => {
            button.innerHTML = originalHTML;
            button.classList.remove("text-green-400");
            button.classList.add("text-gray-400");
          }, 2000);
        } catch (err) {
          console.error("Failed to copy link:", err);
        }
      }, { signal });
    });

    // Clean up classes on dialog close event
    lightboxDialog?.addEventListener(
      "close",
      () => {
        const lightboxImageContainers = document.querySelectorAll<HTMLElement>(
          ".lightbox-image-container",
        );

        // Clean up active classes
        for (const container of lightboxImageContainers) {
          container.classList.remove("active", "previous", "next");
        }
      },
      { signal },
    );

    // Clean up event listeners when navigating away
    document.addEventListener(
      "astro:before-preparation",
      () => {
        abortController.abort();
      },
      { once: true },
    );
  });
</script>
