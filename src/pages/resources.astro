---
import BaseLayout from '../layouts/BaseLayout.astro'
import { getCollection } from "astro:content";
import { getResourceColor } from "../utils/resourceColors";
import ResourceIcon from '../components/atoms/ResourceIcon.astro';

const pageTitle = "Resources"

// Get all resources from collection
const allResources = await getCollection("resources");

// Sort: by order field (if present), then by pubDate (newest first)
const sortedResources = allResources.sort((a, b) => {
  if (a.data.order !== undefined && b.data.order !== undefined) {
    return a.data.order - b.data.order;
  }
  if (a.data.order !== undefined) return -1;
  if (b.data.order !== undefined) return 1;

  // Fallback to date
  const dateA = a.data.pubDate || new Date(0);
  const dateB = b.data.pubDate || new Date(0);
  return dateB.getTime() - dateA.getTime();
});

// Get unique tags for filter keywords
const uniqueTags = [...new Set(allResources.map((r) => r.data.tags).flat())];
---
<BaseLayout pageTitle={`RE sources ${pageTitle}!`}>

    <section class="relative">

        <div class="absolute top-0 bottom-0 z-0 w-full bg-fixed bg-position-[center_top_-200px] bg-cover opacity-30 bg-grene-300" style="background-image: url('/images/render-1.png');"></div>

        <div class="pt-12">
            <h2 class="pt-16 font-extrabold text-center text-white uppercase text-7xl drop-shadow-lg">
                Become unstoppable
            </h2>
            <div class="font-extrabold text-center text-white uppercase mt-14 drop-shadow-lg">
                <form class="max-w-2xl p-0 mx-auto transition-all duration-300 ease-in-out rounded-lg bg-black/40 hover:bg-black/80">
                    <input
                        class="w-full px-5 py-3 mt-0 text-2xl text-white bg-transparent border-none rounded-lg hover:ring-1"
                        type="text" placeholder="Search..." />
                </form>
            </div>
            <ul
                class="flex items-center justify-center w-full pb-6 mx-auto mt-4 font-bold tracking-wider text-center text-yellow-400 uppercase divide-x-2 cursor-pointer divide-yellow-600/20 border-opacity-20 text-md drop-shadow-md">
                <li class="px-3 transition-all duration-500 opacity-40 hover:opacity-100" data-tag-filter="">All</li>
                {uniqueTags.map((tag) => (
                  <li class="px-3 transition-all duration-500 opacity-40 hover:opacity-100" data-tag-filter={tag}>
                    {tag}
                  </li>
                ))}
            </ul>
        </div>

        <div class="container relative mx-auto text-left pt-64 max-w-8xl pb-44">
            <div class="grid grid-cols-1 gap-4 md:grid-cols-3 xl:grid-cols-5">

                {sortedResources.map((resource, index) => {
                  const color = getResourceColor(resource.data.tags, resource.data.color, index);
                  // Stagger the vertical positioning (repeating pattern: -56, -32, 0, -32, -56)
                  const translateYClasses = ['-translate-y-56', '-translate-y-32', '-translate-y-0', '-translate-y-32', '-translate-y-56'];
                  const translateY = translateYClasses[index % 5];

                  // Use surTitle/mainTitle if available, otherwise fallback to full title
                  const displaySurTitle = resource.data.surTitle;
                  const displayMainTitle = resource.data.mainTitle || resource.data.title;

                  return (
                    <a href={`/resources/${resource.id}`}
                       data-resource-card
                       data-title={resource.data.title}
                       data-description={resource.data.description}
                       data-tags={resource.data.tags.join(' ')}
                       class={`flex flex-col items-left justify-center gap-8 py-2 transition-all duration-500 transform ${translateY} bg-${color}/30 rounded-2xl pane aspect-chonk hover:bg-${color}/80 hover:scale-125 hover:z-30 hover:shadow-2xl`}>
                      <h4 class="text-5xl font-extrabold tracking-tight text-left">
                        {displaySurTitle && (
                          <span class="block text-2xl font-normal">{displaySurTitle}</span>
                        )}
                        <span class="block">{displayMainTitle}</span>
                      </h4>
                      <ResourceIcon icon={resource.data.icon} />
                    </a>
                  );
                })}

            </div>
        </div>

        <div class="flex items-center justify-center w-full h-40">
            <svg class="-mt-40 text-white w-14 h-14 opacity-40 animate-bounce">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 13l-3 3m0 0l-3-3m3 3V8m0 13a9 9 0 110-18 9 9 0 010 18z" />
                </svg>
            </svg>
        </div>

    </section>

</BaseLayout>

<script>
  const searchInput = document.querySelector('input[type="text"]');
  const resourceCards = document.querySelectorAll('[data-resource-card]');

  searchInput?.addEventListener('input', (e) => {
    const query = (e.target as HTMLInputElement).value.toLowerCase();

    resourceCards.forEach(card => {
      const cardElement = card as HTMLElement;
      const title = cardElement.dataset.title?.toLowerCase() || '';
      const description = cardElement.dataset.description?.toLowerCase() || '';
      const tags = cardElement.dataset.tags?.toLowerCase() || '';

      const matches = title.includes(query) ||
                      description.includes(query) ||
                      tags.includes(query);

      cardElement.style.display = matches ? '' : 'none';
    });
  });

  // Tag click auto-populates search
  const tagLinks = document.querySelectorAll('[data-tag-filter]');
  tagLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const tag = (link as HTMLElement).dataset.tagFilter || '';
      if (searchInput) {
        (searchInput as HTMLInputElement).value = tag;
        searchInput.dispatchEvent(new Event('input'));
      }
    });
  });
</script>
