---
import BaseLayout from '../layouts/BaseLayout.astro'
import { getCollection } from "astro:content";
import { getResourceColor, featuredCategories } from "../utils/resourceColors";
import ResourceIcon from '../components/atoms/ResourceIcon.astro';

const pageTitle = "Resources"

// Get all resources from collection
const allResources = await getCollection("resources");

// Sort: by order field (if present), then by pubDate (newest first)
const sortedResources = allResources.sort((a, b) => {
  if (a.data.order !== undefined && b.data.order !== undefined) {
    return a.data.order - b.data.order;
  }
  if (a.data.order !== undefined) return -1;
  if (b.data.order !== undefined) return 1;

  // Fallback to date
  const dateA = a.data.pubDate || new Date(0);
  const dateB = b.data.pubDate || new Date(0);
  return dateB.getTime() - dateA.getTime();
});
---
<BaseLayout pageTitle={`RE sources ${pageTitle}!`}>

    <section class="relative">

        <div class="absolute top-0 bottom-0 z-0 w-full bg-fixed bg-position-[center_top_-200px] bg-cover opacity-30 bg-grene-300" style="background-image: url('/images/render-1.png');"></div>

        <div class="pt-12">
            <h2 class="pt-16 font-extrabold text-center text-white uppercase text-7xl drop-shadow-lg">
                Become unstoppable
            </h2>
            <div class="font-extrabold text-center text-white uppercase mt-14 drop-shadow-lg">
                <form class="relative max-w-2xl p-0 mx-auto transition-all duration-300 ease-in-out rounded-lg bg-black/40 hover:bg-black/80">
                    <input
                        id="search-input"
                        class="w-full px-5 py-3 pr-12 mt-0 text-2xl text-white bg-transparent border-none rounded-lg hover:ring-1"
                        type="text" placeholder="Search..." />
                    <button
                        id="clear-search"
                        type="button"
                        class="absolute hidden transition-all duration-200 transform -translate-y-1/2 right-4 top-1/2 hover:scale-110"
                        aria-label="Clear search">
                        <svg class="w-6 h-6 text-white opacity-60 hover:opacity-100" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <circle cx="12" cy="12" r="10" stroke-width="2"/>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 9l-6 6m0-6l6 6"/>
                        </svg>
                    </button>
                </form>
            </div>
            <ul
                class="flex items-center justify-center w-full pb-6 mx-auto mt-4 font-bold tracking-wider text-center text-yellow-400 uppercase divide-x-2 cursor-pointer divide-yellow-600/20 border-opacity-20 text-md drop-shadow-md">
                {featuredCategories.map((category) => (
                  <li
                    class="px-3 transition-all duration-500 opacity-40 hover:opacity-100"
                    data-category-filter={category.name}
                    data-category-tags={category.tags.join(',')}
                  >
                    {category.name}
                  </li>
                ))}
            </ul>
        </div>

        <div class="container relative pt-64 mx-auto text-left max-w-8xl pb-44">
            <div id="resource-grid" class="grid grid-cols-1 gap-4 md:grid-cols-3 xl:grid-cols-5">

                {sortedResources.map((resource, index) => {
                  const color = getResourceColor(resource.data.tags, resource.data.color, index);

                  // Use surTitle/mainTitle if available, otherwise fallback to full title
                  const displaySurTitle = resource.data.surTitle;
                  const displayMainTitle = resource.data.mainTitle || resource.data.title;

                  return (
                    <a href={`/resources/${resource.id}`}
                       data-resource-card
                       data-title={resource.data.title}
                       data-description={resource.data.description}
                       data-tags={resource.data.tags.join(' ')}
                       class={`resource-card flex flex-col items-left justify-center gap-8 py-2 transition-all duration-500 transform bg-${color}/30 rounded-2xl pane aspect-chonk hover:bg-${color}/80 hover:scale-125 hover:z-30 hover:shadow-2xl`}>
                      <h4 class="text-4xl font-extrabold tracking-tight text-left">
                        {displaySurTitle && (
                          <span class="block text-2xl font-bold">{displaySurTitle}</span>
                        )}
                        <span class="block">{displayMainTitle}</span>
                      </h4>
                      <ResourceIcon icon={resource.data.icon} />
                    </a>
                  );
                })}

            </div>
        </div>

        <div class="flex items-center justify-center w-full h-40">
            <svg class="-mt-40 text-white w-14 h-14 opacity-40 animate-bounce">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 13l-3 3m0 0l-3-3m3 3V8m0 13a9 9 0 110-18 9 9 0 010 18z" />
                </svg>
            </svg>
        </div>

    </section>

</BaseLayout>

<script>
  const searchInput = document.getElementById('search-input') as HTMLInputElement | null;
  const clearButton = document.getElementById('clear-search');
  const resourceCards = document.querySelectorAll('[data-resource-card]');
  const resourceGrid = document.getElementById('resource-grid');

  // Translation pattern based on column position (5-column grid)
  const translateYClasses = ['-translate-y-56', '-translate-y-32', '-translate-y-0', '-translate-y-32', '-translate-y-56'];

  // Update URL hash with current search/filter state
  function updateHash(value: string) {
    if (value) {
      window.location.hash = encodeURIComponent(value);
    } else {
      // Clear hash without adding to history
      history.replaceState(null, '', window.location.pathname);
    }
  }

  // Show/hide clear button based on input value
  function toggleClearButton() {
    if (!searchInput || !clearButton) return;
    if (searchInput.value.length > 0) {
      clearButton.classList.remove('hidden');
    } else {
      clearButton.classList.add('hidden');
    }
  }

  function applyGridTranslations() {
    if (!resourceGrid) return;

    // Get visible cards
    const visibleCards = Array.from(resourceCards).filter(card => {
      const cardElement = card as HTMLElement;
      return cardElement.style.display !== 'none';
    });

    // Get the computed column count from the grid
    const computedStyle = window.getComputedStyle(resourceGrid);
    const columnCount = computedStyle.gridTemplateColumns.split(' ').length;

    // Apply translations based on position in grid
    visibleCards.forEach((card, index) => {
      const cardElement = card as HTMLElement;
      const columnIndex = index % columnCount;

      // Remove all existing translate classes
      translateYClasses.forEach(cls => cardElement.classList.remove(cls));

      // Apply the correct translate class for this column
      const translateClass = translateYClasses[columnIndex % 5];
      cardElement.classList.add(translateClass);
    });
  }

  // Apply translations on load
  applyGridTranslations();

  // Reapply on window resize (for responsive column changes)
  let resizeTimeout: number;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(applyGridTranslations, 100);
  });

  // Clear button functionality
  clearButton?.addEventListener('click', () => {
    if (searchInput) {
      searchInput.value = '';
      searchInput.dispatchEvent(new Event('input'));
      searchInput.focus();
    }
  });

  // Search functionality
  let searchTimeout: number;
  searchInput?.addEventListener('input', (e) => {
    const query = (e.target as HTMLInputElement).value.toLowerCase();

    // Toggle clear button visibility
    toggleClearButton();

    // Filter resources
    resourceCards.forEach(card => {
      const cardElement = card as HTMLElement;
      const title = cardElement.dataset.title?.toLowerCase() || '';
      const description = cardElement.dataset.description?.toLowerCase() || '';
      const tags = cardElement.dataset.tags?.toLowerCase() || '';

      const matches = title.includes(query) ||
                      description.includes(query) ||
                      tags.includes(query);

      cardElement.style.display = matches ? '' : 'none';
    });

    // Reapply grid translations after filtering
    applyGridTranslations();

    // Update URL hash with debounce (500ms)
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => {
      updateHash(query);
    }, 500);
  });

  // Category click filters resources
  const categoryLinks = document.querySelectorAll('[data-category-filter]');
  categoryLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const categoryName = (link as HTMLElement).dataset.categoryFilter || '';
      const categoryTags = (link as HTMLElement).dataset.categoryTags || '';

      // If "All" category, clear search and show all
      if (categoryName === 'All' || categoryTags === '') {
        if (searchInput) {
          searchInput.value = '';
          searchInput.dispatchEvent(new Event('input'));
        }
        updateHash('');
        return;
      }

      // Populate search box with lowercase category name
      const lowerCategoryName = categoryName.toLowerCase();
      if (searchInput) {
        searchInput.value = lowerCategoryName;
        toggleClearButton(); // Show clear button
      }

      // Filter by category tags
      const tagsArray = categoryTags.split(',');
      resourceCards.forEach(card => {
        const cardElement = card as HTMLElement;
        const cardTags = cardElement.dataset.tags?.toLowerCase() || '';

        // Check if any of the category tags match the card's tags
        const matches = tagsArray.some(tag => cardTags.includes(tag.toLowerCase()));

        cardElement.style.display = matches ? '' : 'none';
      });

      // Reapply grid translations after filtering
      applyGridTranslations();

      // Update active state
      categoryLinks.forEach(l => l.classList.remove('opacity-100'));
      categoryLinks.forEach(l => l.classList.add('opacity-40'));
      link.classList.remove('opacity-40');
      link.classList.add('opacity-100');

      // Update URL hash with lowercase category name
      updateHash(lowerCategoryName);
    });
  });

  // Read hash on page load and restore filter state
  window.addEventListener('DOMContentLoaded', () => {
    const hash = window.location.hash.slice(1); // Remove #
    if (hash) {
      const decodedHash = decodeURIComponent(hash).toLowerCase();

      // Check if it's a category name (case-insensitive)
      const categoryLink = Array.from(categoryLinks).find(
        link => (link as HTMLElement).dataset.categoryFilter?.toLowerCase() === decodedHash
      );

      if (categoryLink) {
        // It's a category - click it
        (categoryLink as HTMLElement).click();
      } else if (searchInput) {
        // It's a search term - populate search (already lowercase)
        searchInput.value = decodedHash;
        searchInput.dispatchEvent(new Event('input'));
      }
    }
  });
</script>
