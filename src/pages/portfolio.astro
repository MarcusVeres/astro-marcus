---
import BaseLayout from '../layouts/BaseLayout.astro'
import { getCollection } from 'astro:content';
import { getResourceColor, featuredCategories } from "../utils/resourceColors";

import SocialIcons from '../components/blocks/SocialIcons.astro'
import SocialIconsFooter from '../components/blocks/SocialIconsFooter.astro'

const pageTitle = "Portfolio"

// Get all portfolio items and sort by order
const portfolioItems = await getCollection('portfolio');
const sortedItems = portfolioItems.sort((a, b) => {
  const orderA = a.data.order || 999;
  const orderB = b.data.order || 999;
  return orderA - orderB;
});
---
<BaseLayout pageTitle={`${pageTitle} blog`}>

  <!-- GLightbox CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/glightbox/dist/css/glightbox.min.css" />
  <link rel="stylesheet" href="/src/styles/lightbox.css" />

  <!-- <SocialIconsFooter /> -->

  <div class="px-2 pt-4 md:pt-6 md:px-0">
      <h2 class="pt-4 text-4xl font-extrabold text-center text-white uppercase md:pt-16 md:text-7xl drop-shadow-lg">
          Portfolio Gallery
      </h2>
      <div class="mt-6 font-extrabold text-center text-white uppercase md:mt-14 drop-shadow-lg">
          <form class="relative max-w-2xl p-0 mx-auto transition-all duration-300 ease-in-out rounded-lg bg-black/40 hover:bg-black/80">
              <input
                  id="search-input"
                  class="w-full px-5 py-3 pr-12 mt-0 text-2xl text-white bg-transparent border-none rounded-lg hover:ring-1"
                  type="text" placeholder="Search..." />
              <button
                  id="clear-search"
                  type="button"
                  class="absolute hidden transition-all duration-200 transform -translate-y-1/2 right-4 top-1/2 hover:scale-110"
                  aria-label="Clear search">
                  <svg class="w-6 h-6 text-white opacity-60 hover:opacity-100" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <circle cx="12" cy="12" r="10" stroke-width="2"/>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 9l-6 6m0-6l6 6"/>
                  </svg>
              </button>
          </form>
      </div>
      <ul
          class="flex items-center w-full pb-6 mx-auto mt-4 overflow-x-auto font-bold tracking-wider text-center text-yellow-400 uppercase divide-x-2 cursor-pointer divide-yellow-600/20 border-opacity-20 text-md drop-shadow-md md:justify-center md:overflow-x-visible scrollbar-hide snap-x snap-mandatory">
          {featuredCategories.map((category) => (
            <li
              class="flex-shrink-0 px-3 transition-all duration-500 opacity-40 hover:opacity-100 snap-center"
              data-category-filter={category.name}
              data-category-tags={category.tags.join(',')}
            >
              {category.name}
            </li>
          ))}
      </ul>
  </div>

  <!-- consider: adding a wrapper container for the 16px extra padding that isn't respected by grid. can't use margin because mx-auto is already in use-->
  <div class="container grid grid-cols-2 gap-2 p-2 mx-auto mt-12 text-white max-w-7xl sm:p-4 sm:gap-4 sm:grid-cols-3 lg:grid-cols-4">

    <div class="flex items-center justify-center col-span-2 border rounded-lg shadow-inner bg-gray-950 border-white/10 bg-opacity-40 sm:col-span-3 md:col-span-2">
      <h1 class="p-1 m-0 text-6xl font-extrabold tracking-wide text-transparent uppercase bg-clip-text bg-gradient-to-r from-yellow-400 to-pink-500">
        Portfolio
      </h1>
    </div>

    {sortedItems.map((item, index) => {
      const { title, description, image, contentType, gridSpan, aspectRatio } = item.data;

      // Determine grid classes based on gridSpan
      let gridClass = '';
      if (gridSpan === 'wide') gridClass = 'md:col-span-2';
      else if (gridSpan === 'tall') gridClass = 'row-span-2';
      else if (gridSpan === 'large') gridClass = 'md:col-span-2 row-span-2';

      // Determine aspect ratio class
      let aspectClass = '';
      if (aspectRatio === 'golden') aspectClass = 'aspect-golden';
      else if (aspectRatio === 'square') aspectClass = 'aspect-square';
      else if (aspectRatio === 'portrait') aspectClass = 'aspect-portrait';
      else if (aspectRatio === 'landscape') aspectClass = 'aspect-landscape';

      // For first collection item, add md:col-start-3 to match original layout
      const startClass = index === 0 ? 'md:col-start-3' : '';

      // Generate the URL for this portfolio item
      const itemUrl = `/portfolio/${item.id}`;

      return (
        <a
          href={itemUrl}
          class={`glightbox portfolio-item card-zoom ${gridClass} ${aspectClass} ${startClass}`}
          data-type="iframe"
          data-width="90vw"
          data-height="90vh"
        >
          <div class="card-zoom-image" style={`background-image: url('${image}');`}></div>
          {contentType === 'case-study' && (
            <h3 class="hidden text-center uppercase text-md md:block md:text-2xl lg:text-3xl card-zoom-text xl:text-4xl">Case Study</h3>
          )}
        </a>
      );
    })}

  </div>

</BaseLayout>

<!-- GLightbox JS -->
<script src="https://cdn.jsdelivr.net/npm/glightbox/dist/js/glightbox.min.js"></script>

<script>
  import GLightbox from 'glightbox';

  // Build elements array manually for GLightbox
  const portfolioLinks = document.querySelectorAll('.glightbox');
  console.log('Found', portfolioLinks.length, 'portfolio items');

  // Build inline HTML with iframe for each portfolio item
  const elements = Array.from(portfolioLinks).map((link, index) => {
    const relativeHref = link.getAttribute('href');
    const absoluteHref = new URL(relativeHref, window.location.origin).href;

    return {
      content: `<iframe src="${absoluteHref}" style="width: 90vw; height: 90vh; border: none;"></iframe>`,
      type: 'inline'
    };
  });

  console.log('Built elements array:', elements[0]);

  // Initialize GLightbox with manually built elements array
  const lightbox = GLightbox({
    elements: elements,
    touchNavigation: true,
    loop: true,
    closeButton: true,
    preload: false,
    closeOnOutsideClick: true,
    svg: {
      close: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>',
      next: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg>',
      prev: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg>'
    }
  });

  // Manually attach click handlers
  portfolioLinks.forEach((link, index) => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      console.log('Opening lightbox at index:', index);
      lightbox.openAt(index);
    });
  });

  console.log('GLightbox initialized');

  // Debug: Log when lightbox opens
  lightbox.on('open', (slide) => {
    console.log('Lightbox opened, slide:', slide);
    // Check if iframe was created
    setTimeout(() => {
      const iframe = document.querySelector('.gslide-media iframe');
      const gslideMedia = document.querySelector('.gslide-media');
      console.log('gslide-media element:', gslideMedia);
      console.log('gslide-media innerHTML:', gslideMedia?.innerHTML);
      console.log('Iframe found:', iframe);
      if (iframe) {
        console.log('Iframe src:', iframe.src);
        console.log('Iframe dimensions:', iframe.offsetWidth, 'x', iframe.offsetHeight);
      }
    }, 100);
  });
</script>