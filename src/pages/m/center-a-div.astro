---
import BaseLayout from '../../layouts/BaseLayout.astro';
import IconHand from '../../components/atoms/IconHand.astro';
---

<BaseLayout pageTitle="How to Center a DIV">

  <div
    class="bg-gray-900 sitename debug-screens"
    itemscope
    itemtype="http://schema.org/WebPage"
  >
    <!-- ðŸ”˜ Allows users to skip directly to the main content of the page using TAB -->
    <a
      class="absolute top-0 left-0 invisible screen-reader-text"
      href="#mainContent"
      >Skip to content</a
    >




    <!-- Design with grid, since it's easier... then refactor with flex for compatibility -->
    <section id="method-1" class="p-8">
      <div
        class="container grid max-w-6xl grid-cols-12 gap-6 p-8 pb-10 mx-auto text-white shadow rounded-xl"
      >
        <div class="flex justify-between col-span-12">
          <h1 class="text-2xl font-extrabold">How to Center a DIV with Flexbox</h1>
          <ul class="flex text-black list-of-tags">
            <li class="block px-2 py-0 mx-1 mb-2 mr-1 text-sm font-light text-blue-300 duration-500 bg-transparent border border-blue-400 rounded-full lg:mr-0 lg:py-1 hover:bg-blue-600 hover:text-white hover:border-transparent">CSS</li>
            <li class="block px-2 py-0 mx-1 mb-2 mr-1 text-sm font-light text-blue-300 duration-500 bg-transparent border border-blue-400 rounded-full lg:mr-0 lg:py-1 hover:bg-blue-600 hover:text-white hover:border-transparent">HTML</li>
          </ul>
        </div>
        <div
          class="relative col-span-12 bg-gray-700 h-60 rounded-xl unselectable"
          id="target-container"
        >
          <div
            class="relative flex items-center justify-center w-full h-full bg-gray-800 rounded-xl"
            id="resize-target"
          >
            <div class="p-4 text-black uppercase bg-yellow-400">Flex Centered Content</div>
          </div>
          <div
            class="absolute w-10 h-10 p-2 text-center bg-yellow-400 rounded-md cursor-pointer left-full top-full resize-toggle resize-toggle-w"
            id="size-adjuster"
          >
            <IconHand class="text-gray-700" />
          </div>
        </div>
        <div class="col-span-12 md:col-span-7 rounded-xl">
          <p
            class="codepen"
            data-height="350"
            data-theme-id="dark"
            data-default-tab="html,css"
            data-user="GI-IO5T"
            data-slug-hash="yLMjypr"
            style="
              height: 229px;
              box-sizing: border-box;
              display: flex;
              align-items: center;
              justify-content: center;
              border: 2px solid;
              margin: 1em 0;
              padding: 1em;
            "
            data-pen-title="yLMjypr"
          >
            <span
              >See the Pen
              <a href="https://codepen.io/GI-IO5T/pen/yLMjypr"> yLMjypr</a> by
              Marcus (<a href="https://codepen.io/GI-IO5T">@GI-IO5T</a>) on
              <a href="https://codepen.io">CodePen</a>.</span
            >
          </p>
          <script
            async
            src="https://cpwebassets.codepen.io/assets/embed/ei.js"
          ></script>
        </div>
        <div
          class="flex flex-col justify-between col-span-12 pl-4 text-sm md:col-span-5 md:col-start-8"
        >
          <ul>
            <li class="p-2">
              Parent element must be <span class="code-word">flex</span>
            </li>
            <li class="p-2">
              Center <span class="font-extrabold">horizontally</span> with
              <span class="code-word">justify-content:center;</span>
            </li>
            <li class="p-2">
              Center <span class="font-extrabold">vertically</span> with
              <span class="code-word">align-items:center;</span>
            </li>
            <li class="p-2">
              Setting <span class="font-extrabold">height</span> to
              <span class="code-word">100vh</span> will make the flex container
              stretch to 100% of the vertical height of its container. This is
              done to show off vertical centering in the example, but you may
              not need it in your code.
            </li>
          </ul>

          <!--
          <ul class="flex justify-between next-nav">
            <li class="px-4 py-2 rounded-md shadow bg-gray-50 button">
              Show me another way
              <i class="text-gray-300 fa fa-arrow-circle-down"></i>
            </li>
            <li class="px-4 py-2 ml-4 rounded-md shadow bg-gray-50 button">
              This is the way <i class="text-gray-300 fas fa-thumbs-up"></i>
            </li>
          </ul>
          -->

        </div>
      </div>
    </section>

  </div>

</BaseLayout>

<style>
  #size-adjuster {
    margin-left: -20px;
    margin-top: -20px;
  }
  .unselectable {
    user-select: none;
    -moz-user-select: none;
    -khtml-user-select: none;
    -webkit-user-select: none;
    -o-user-select: none;
  }
</style>


<!-- TODO :: Replace this resize with a pure JS, custom resize of CSS element -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-resize/1.1/jquery.ba-resize.min.js"></script>

<script>
  var body = null;
  var isResizing = false;
  var minResizeHeight = 120;
  var minResizeWidth = 200;
  var target = document.getElementById('resize-target');
  var targetContainer = document.getElementById('target-container');
  let sizeAdjuster = document.getElementById('size-adjuster');

  function activate()
  {
      sizeAdjuster.addEventListener('mousedown', widthAdjustMouseDown);

      body = document.getElementsByTagName('body')[0];
      body.addEventListener('mousemove', mouseMoving);
      body.addEventListener('mouseup', widthAdjustMouseUp);
  }
  activate();

  function deactivate()
  {
      sizeAdjuster.removeEventListener('mousedown', widthAdjustMouseDown);
      body.removeEventListener('mousemove', mouseMoving);
      body.removeEventListener('mouseup', widthAdjustMouseUp);
  }

  function widthAdjustMouseDown(element)
  {
      isResizing = true;
  }
  function widthAdjustMouseUp(element)
  {
      isResizing = false;
  }
  function mouseMoving(event)
  {
    if (isResizing)
      {
          var rect = targetContainer.getBoundingClientRect();
          var x = event.clientX - rect.left;
          var y = event.clientY - rect.top;

          if ( x < minResizeWidth )
          {
              x = minResizeWidth;
          }
          else if ( x > rect.width )
          {
              x = rect.width;
          }

          if ( y < minResizeHeight )
          {
              y = minResizeHeight;
          }
          else if ( y > rect.height )
          {
              y = rect.height;
          }

          target.style.width = x + 'px';
          sizeAdjuster.style.left = x + 'px';

          target.style.height = y + 'px';
          sizeAdjuster.style.top = y + 'px';
    }
  }
</script>

<!-- ============================================ -->
<!-- WINDOW RESIZE HANDLER (separate for debugging) -->
<!-- ============================================ -->
<script>
  // Get references to elements
  const resizeTarget = document.getElementById('resize-target');
  const container = document.getElementById('target-container');
  const adjuster = document.getElementById('size-adjuster');

  // Store the last known container size to detect changes
  let lastContainerWidth = 0;
  let lastContainerHeight = 0;

  function handleWindowResize() {
    if (!container || !resizeTarget || !adjuster) return;

    const containerRect = container.getBoundingClientRect();
    const currentTargetWidth = parseFloat(resizeTarget.style.width) || resizeTarget.offsetWidth;
    const currentTargetHeight = parseFloat(resizeTarget.style.height) || resizeTarget.offsetHeight;

    // Check if container size actually changed
    if (containerRect.width !== lastContainerWidth || containerRect.height !== lastContainerHeight) {
      console.log('Container resized:', {
        oldWidth: lastContainerWidth,
        newWidth: containerRect.width,
        oldHeight: lastContainerHeight,
        newHeight: containerRect.height
      });

      // If target is larger than container, constrain it
      if (currentTargetWidth > containerRect.width) {
        const newWidth = Math.max(200, containerRect.width);
        resizeTarget.style.width = newWidth + 'px';
        adjuster.style.left = newWidth + 'px';
        console.log('Constrained width to:', newWidth);
      }

      if (currentTargetHeight > containerRect.height) {
        const newHeight = Math.max(120, containerRect.height);
        resizeTarget.style.height = newHeight + 'px';
        adjuster.style.top = newHeight + 'px';
        console.log('Constrained height to:', newHeight);
      }

      // Update last known size
      lastContainerWidth = containerRect.width;
      lastContainerHeight = containerRect.height;
    }
  }

  // Initialize on load
  window.addEventListener('DOMContentLoaded', () => {
    if (container) {
      const rect = container.getBoundingClientRect();
      lastContainerWidth = rect.width;
      lastContainerHeight = rect.height;
      console.log('Initial container size:', lastContainerWidth, 'x', lastContainerHeight);
    }
  });

  // Listen for window resize with debounce
  let resizeTimeout;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(handleWindowResize, 150);
  });
</script>
